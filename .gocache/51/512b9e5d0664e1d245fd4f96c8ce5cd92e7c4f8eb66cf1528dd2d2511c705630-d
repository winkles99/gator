// Code generated by cmd/cgo; DO NOT EDIT.

//line /workspaces/gator/.gomod/github.com/pganalyze/pg_query_go/v6@v6.1.0/parser/parser.go:1:1
package parser; import _cgo_unsafe "unsafe"

/*
#cgo CFLAGS: -Iinclude -Iinclude/postgres -g -fstack-protector -std=gnu99 -Wno-unknown-warning-option
#cgo windows CFLAGS: -Iinclude/postgres/port/win32
#cgo LDFLAGS:
#include "pg_query.h"
#include "xxhash.h"
#include <stdlib.h>

// Avoid complexities dealing with C structs in Go
PgQueryDeparseResult pg_query_deparse_protobuf_direct_args(void* data, unsigned int len) {
	PgQueryProtobuf p;
	p.data = (char *) data;
	p.len = len;
	return pg_query_deparse_protobuf(p);
}

// Avoid inconsistent type behaviour in xxhash library
uint64_t pg_query_hash_xxh3_64(void *data, size_t len, size_t seed) {
	return XXH3_64bits_withSeed(data, len, seed);
}
*/
import _ "unsafe"

import (
	"strings"
	"unsafe"
)

func init() {
	( /*line :32:2*/_Cfunc_pg_query_init /*line :32:16*/)()
}

type Error struct {
	Message   string // exception message
	Funcname  string // source function of exception (e.g. SearchSysCache)
	Filename  string // source of exception (e.g. parse.l)
	Lineno    int    // source of exception (e.g. 104)
	Cursorpos int    // char in query at which exception occurred
	Context   string // additional context (optional, can be NULL)
}

func (e *Error) Error() string {
	return e.Message
}

func newPgQueryError(errC * /*line :48:28*/_Ctype_PgQueryError /*line :48:42*/) *Error {
	err := &Error{
		Message:   ( /*line :50:14*/_Cfunc_GoString /*line :50:23*/)(errC.message),
		Lineno:    int(errC.lineno),
		Cursorpos: int(errC.cursorpos),
	}
	if errC.funcname != nil {
		err.Funcname = ( /*line :55:18*/_Cfunc_GoString /*line :55:27*/)(errC.funcname)
	}
	if errC.filename != nil {
		err.Filename = ( /*line :58:18*/_Cfunc_GoString /*line :58:27*/)(errC.filename)
	}
	if errC.context != nil {
		err.Context = ( /*line :61:17*/_Cfunc_GoString /*line :61:26*/)(errC.context)
	}
	return err
}

// ParseToJSON - Parses the given SQL statement into a parse tree (JSON format)
func ParseToJSON(input string) (result string, err error) {
	inputC := ( /*line :68:12*/_Cfunc_CString /*line :68:20*/)(input)
	defer func() func() { _cgo0 := /*line :69:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :69:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :71:13*/_Cfunc_pg_query_parse /*line :71:28*/)(inputC)

	defer func() func() { _cgo0 := /*line :73:37*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :73:45*/_Cfunc_pg_query_free_parse_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = ( /*line :80:11*/_Cfunc_GoString /*line :80:20*/)(resultC.parse_tree)

	return
}

// Scans the given SQL statement into a protobuf ScanResult
func ScanToProtobuf(input string) (result []byte, err error) {
	inputC := ( /*line :87:12*/_Cfunc_CString /*line :87:20*/)(input)
	defer func() func() { _cgo0 := /*line :88:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :88:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :90:13*/_Cfunc_pg_query_scan /*line :90:27*/)(inputC)
	defer func() func() { _cgo0 := /*line :91:36*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :91:44*/_Cfunc_pg_query_free_scan_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = []byte(( /*line :98:18*/_Cfunc_GoStringN /*line :98:28*/)(resultC.pbuf.data,  /*line :98:49*/_Ctype_int /*line :98:54*/(resultC.pbuf.len)))

	return
}

// ParseToProtobuf - Parses the given SQL statement into a parse tree (Protobuf format)
func ParseToProtobuf(input string) (result []byte, err error) {
	inputC := ( /*line :105:12*/_Cfunc_CString /*line :105:20*/)(input)
	defer func() func() { _cgo0 := /*line :106:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :106:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :108:13*/_Cfunc_pg_query_parse_protobuf /*line :108:37*/)(inputC)

	defer func() func() { _cgo0 := /*line :110:46*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :110:54*/_Cfunc_pg_query_free_protobuf_parse_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = []byte(( /*line :117:18*/_Cfunc_GoStringN /*line :117:28*/)(resultC.parse_tree.data,  /*line :117:55*/_Ctype_int /*line :117:60*/(resultC.parse_tree.len)))

	return
}

// DeparseFromProtobuf - Deparses the given Protobuf format parse tree into a SQL statement
func DeparseFromProtobuf(input []byte) (result string, err error) {
	inputC := func() _cgo_unsafe.Pointer{ _cgo0 := /*line :124:21*/input; _cgoCheckPointer(_cgo0, nil); return /*line :124:27*/_Cfunc_CBytes(_cgo0); }()
	defer func() func() { _cgo0 := /*line :125:15*/inputC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :125:22*/_Cfunc_free(_cgo0); }}()()

	resultC := func() _Ctype_struct___3{ _cgo0 := /*line :127:53*/inputC; var _cgo1 _Ctype_uint = _Ctype_uint /*line :127:67*/(len(input)); _cgoCheckPointer(_cgo0, nil); return /*line :127:80*/_Cfunc_pg_query_deparse_protobuf_direct_args(_cgo0, _cgo1); }()

	defer func() func() { _cgo0 := /*line :129:39*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :129:47*/_Cfunc_pg_query_free_deparse_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = ( /*line :136:11*/_Cfunc_GoString /*line :136:20*/)(resultC.query)

	return
}

// ParsePlPgSqlToJSON - Parses the given PL/pgSQL function statement into a parse tree (JSON format)
func ParsePlPgSqlToJSON(input string) (result string, err error) {
	inputC := ( /*line :143:12*/_Cfunc_CString /*line :143:20*/)(input)
	defer func() func() { _cgo0 := /*line :144:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :144:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :146:13*/_Cfunc_pg_query_parse_plpgsql /*line :146:36*/)(inputC)

	defer func() func() { _cgo0 := /*line :148:45*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :148:53*/_Cfunc_pg_query_free_plpgsql_parse_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = ( /*line :155:11*/_Cfunc_GoString /*line :155:20*/)(resultC.plpgsql_funcs)

	return
}

// Normalize the passed SQL statement to replace constant values with ? characters
func Normalize(input string) (result string, err error) {
	inputC := ( /*line :162:12*/_Cfunc_CString /*line :162:20*/)(input)
	defer func() func() { _cgo0 := /*line :163:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :163:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :165:13*/_Cfunc_pg_query_normalize /*line :165:32*/)(inputC)
	defer func() func() { _cgo0 := /*line :166:41*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :166:49*/_Cfunc_pg_query_free_normalize_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = ( /*line :173:11*/_Cfunc_GoString /*line :173:20*/)(resultC.normalized_query)

	return
}

// Normalize the passed utility statement to replace constant values with ? characters
func NormalizeUtility(input string) (result string, err error) {
	inputC := ( /*line :180:12*/_Cfunc_CString /*line :180:20*/)(input)
	defer func() func() { _cgo0 := /*line :181:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :181:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :183:13*/_Cfunc_pg_query_normalize_utility /*line :183:40*/)(inputC)
	defer func() func() { _cgo0 := /*line :184:41*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :184:49*/_Cfunc_pg_query_free_normalize_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = ( /*line :191:11*/_Cfunc_GoString /*line :191:20*/)(resultC.normalized_query)

	return
}

func SplitWithScanner(input string, trimSpace bool) (result []string, err error) {
	inputC := ( /*line :197:12*/_Cfunc_CString /*line :197:20*/)(input)
	defer func() func() { _cgo0 := /*line :198:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :198:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :200:13*/_Cfunc_pg_query_split_with_scanner /*line :200:41*/)(inputC)
	defer func() func() { _cgo0 := /*line :201:37*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :201:45*/_Cfunc_pg_query_free_split_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = handleSplitResult(input, trimSpace, resultC)
	return
}

func SplitWithParser(input string, trimSpace bool) (result []string, err error) {
	inputC := ( /*line :213:12*/_Cfunc_CString /*line :213:20*/)(input)
	defer func() func() { _cgo0 := /*line :214:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :214:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :216:13*/_Cfunc_pg_query_split_with_parser /*line :216:40*/)(inputC)
	defer func() func() { _cgo0 := /*line :217:37*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :217:45*/_Cfunc_pg_query_free_split_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = handleSplitResult(input, trimSpace, resultC)
	return
}

func handleSplitResult(input string, trimSpace bool, resultC  /*line :228:62*/_Ctype_PgQuerySplitResult /*line :228:82*/) (result []string) {
	stmts := (** /*line :229:14*/_Ctype_PgQuerySplitStmt /*line :229:32*/)(unsafe.Pointer(resultC.stmts))
	for i := 0; i < int(resultC.n_stmts); i++ {
		stmtptr := (** /*line :231:17*/_Ctype_PgQuerySplitStmt /*line :231:35*/)(unsafe.Pointer(uintptr(unsafe.Pointer(stmts)) + uintptr(i)*unsafe.Sizeof(*stmts)))
		stmt := **stmtptr

		end := stmt.stmt_location + stmt.stmt_len
		stmtStr := input[stmt.stmt_location:end]
		if trimSpace {
			stmtStr = strings.TrimSpace(stmtStr)
		}

		result = append(result, stmtStr)
	}
	return
}

// FingerprintToUInt64 - Fingerprint the passed SQL statement using the C extension and returns result as uint64
func FingerprintToUInt64(input string) (result uint64, err error) {
	inputC := ( /*line :247:12*/_Cfunc_CString /*line :247:20*/)(input)
	defer func() func() { _cgo0 := /*line :248:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :248:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :250:13*/_Cfunc_pg_query_fingerprint /*line :250:34*/)(inputC)
	defer func() func() { _cgo0 := /*line :251:43*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :251:51*/_Cfunc_pg_query_free_fingerprint_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	// https://github.com/golang/go/issues/29878
	result = *(*uint64)(unsafe.Pointer(&resultC.fingerprint))

	return
}

// FingerprintToHexStr - Fingerprint the passed SQL statement using the C extension and returns result as hex string
func FingerprintToHexStr(input string) (result string, err error) {
	inputC := ( /*line :266:12*/_Cfunc_CString /*line :266:20*/)(input)
	defer func() func() { _cgo0 := /*line :267:15*/unsafe.Pointer(inputC); return func() { _cgoCheckPointer(_cgo0, nil); /*line :267:38*/_Cfunc_free(_cgo0); }}()()

	resultC := ( /*line :269:13*/_Cfunc_pg_query_fingerprint /*line :269:34*/)(inputC)
	defer func() func() { _cgo0 := /*line :270:43*/resultC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :270:51*/_Cfunc_pg_query_free_fingerprint_result(_cgo0); }}()()

	if resultC.error != nil {
		err = newPgQueryError(resultC.error)
		return
	}

	result = ( /*line :277:11*/_Cfunc_GoString /*line :277:20*/)(resultC.fingerprint_str)

	return
}

// HashXXH3_64 - Helper method to run XXH3 hash function (64-bit variant) on the given bytes, with the specified seed
func HashXXH3_64(input []byte, seed uint64) (result uint64) {
	inputC := func() _cgo_unsafe.Pointer{ _cgo0 := /*line :284:21*/input; _cgoCheckPointer(_cgo0, nil); return /*line :284:27*/_Cfunc_CBytes(_cgo0); }()
	defer func() func() { _cgo0 := /*line :285:15*/inputC; return func() { _cgoCheckPointer(_cgo0, nil); /*line :285:22*/_Cfunc_free(_cgo0); }}()()

	res := func() _Ctype_uint64_t{ _cgo0 := /*line :287:33*/inputC; var _cgo1 _Ctype_size_t = _Ctype_size_t /*line :287:49*/(len(input)); var _cgo2 _Ctype_size_t = _Ctype_size_t /*line :287:71*/(seed); _cgoCheckPointer(_cgo0, nil); return /*line :287:78*/_Cfunc_pg_query_hash_xxh3_64(_cgo0, _cgo1, _cgo2); }()

	// https://github.com/golang/go/issues/29878
	result = *(*uint64)(unsafe.Pointer(&res))

	return
}
